1.orm对数据的增删改查
  1.0:在Django shell 中操作
	python3 manage.py shell
  

  1.1 添加数据
	模型类.objects.create(属性1=值1,属性2=值2...)

  1.2 查询数据
	all()-select*from 表名,返回的是QuerySet类型
	get()-返回单个对象,book对象.
	      要求只返回单个对象,没有返回对象或多个对象都会产生异常.
	      调用该函数时,通常加错误处理,放到try中.
	重写模型类的str方法,打印时,可以直接看到模型类的详细数据
	注意:修改了模型类之后,需要重新进入Django shell
	filter()-返回多个对象,返回值类型也是queryset类型.
	返回值中可以有零个.一个或多个对象.
	values()- 返回指定列的数据,返回值是QuerySet类型.不同的是元素用字典表示.
	values_list()-返回指定列的数据,返回值是QuerySet类型.元素用元组表示.根据下标获取位置
	exclude()-除满足条件之外的所有记录,返回值是QuerySet类型,
	order_by()-排序,对QuerySet排序
  1.3 属性=值的简单方式,只能做等值匹配.如果需要比较运算的话,要引入'查询谓词'的概念
  1.4 多个属性=值之间,多个条件之间是与关系,两个条件都满足.
	除此之外,还有逻辑或和逻辑非.要引入Q对象.

  1.5修改
	1.5.1修改单个对象
	   1.查  2.改
	1.5.2 批量修改
		filter()
		update()
		使用批量修改的方式可以提升修改的效率

  1.6删除
	1.6.1 删除单个对象
	get().delete()
	1.6.2 批量删除
	filter().delete()
	
	在项目中的删除操作一定真的会把数据从数据库中删除吗?
	一般情况下,我们会在对应的表中增加一个删除标记字段(1或0)

2 对图书的增删改查案例
  2.1 对照添加和修改
	添加是添加新的数据,get到添加图书的页面时,页面上是没有数据的.
	修改是修改已有数据,get到修改图书的页面时,页面上是有数据的.

3 关于url?
   3.1 urls.py中
	一般如果url中的path写完了,后边不加/.
	因为 分布式路由通常在应用的url中还有其他部分,所以一般有/
   3.2 前端页面中的/
	在前端页面中用到url了,前面一般要有/.例如image的src,a标签的href属性,还有form表单的action属性
	以all_book.html为例
	<a href="/bookstore/add_book">添加图书</a>
	/表示项目的根url, http://127.0.0.1:8000/bookstore/add_book

4.如果出现迁移文件和数据库的表结构不一致,或者迁移文件出错了?
  终极解决办法:
  删除项目中所有的app下的迁移文件,然后使用模型类重新生成
  python3 manage.py makemigrations
  删除数据库,重新创建一个新的数据库,根据迁移文件生成新的表结构
  不要试图通过sql去修改表结构.

5.form表单的action属性,表示你整个表单数据向哪个url提交
  url会对应
  
