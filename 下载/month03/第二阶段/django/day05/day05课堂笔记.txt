1.聚合查询
    1.1不带分组的聚合查询
	aggregate(mycnt=Count('列'))
    1.2带分组的聚合查询
	QuerySet.annotate(结果变量名=聚合函数('列'))
2.F对象
    一个F()对象代表了一个model的字段的值
    使用场景:
        2.1给予原有数据的值去修改
	2.2比较两个字段的值
3.原生的数据库操作方法
  3.1查询
  3.2增删改
4.Django的后台数据库管理 admin
5.数据库关联数据映射
  三种关系:1对1,1对多,多对多
	models.OneToOneField() 
	models.ForeignKey()
  Student 表-学生表
  Course表-课程表
  引入 第三张表关系
  5.1一对一
	5.1.1 创建表关系
	  县创建一个oto应用,并注册
	  python3 manage.py startapp oto
	  添加Author和Wife两个模型类
	  python3 manage.py makemigrations
	  python3 manage.py migrate
	5.1.2 添加数据
	5.1.3 查询数据
	  1.正向查询,由从表查主表信息
		wife1.author.name
		wife2.author.name
	  2.反向查询,由主表查从表信息
		author1.wife.name
		author2.wife.name
  5.2一对多
		一是主,多是从
	5.2.1 创建表结构
	  在一对多的表中,关联属性是添加到'多'表中的.
	  创建otm应用,并注册
	  python3 manage.py startapp otm
	  在otm的models.py文件中增加Publisher和Book类
	  通过模型类生成表结构
	  python3 manage.py makemigrations
	  python3 manage.py migrate
	5.2.2 添加数据
		先添加主表(一)信息,再添加从表(多)信息
		1.常规创建:使用对应模型类创建
		
    		
    		
		2.使用反向属性创建
	5.2.3 查询数据
		1.正向查询(从拥有关联属性开始查询)由从查主
		book1.publisher.name
		2.反向查询(book_set)由主查从
		books = pub1.book_set.all()
